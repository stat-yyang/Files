{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "description": "TreeWAS hierarchy",
  "padding": 16,
  "width": 400,
	"height": 300,
  "autosize": {"type": "pad", "resize": true},

  "config": {
    "background": null,
    "group": {
      "fill": "rgb(250,250,250)",
      "stroke": "rgb(225,225,225)"
    }
  },

  "title": {
    "text": "TreeWAS association result — Variant ID: ",
    "orient": "top",
    "anchor": "start",
    "fontSize": 13,
    "fontWeight": "normal",
    "color": "#888"
  },

  "signals": [
		{
			"name": "cutoff",
			"value": 0.1
		},
		{
      "name": "scaled",
      "value": "absolute",
      "bind": {"input": "radio", "options": ["absolute", "relative"], "name": "Node arrangement:"}
    },
		{
      "name": "colored",
      "value": "continuous",
      "bind": {"input": "radio", "options": ["continuous", "discrete"], "name": "Color scale:"}
    }
  ],

  "data": [
    {
      "name": "tree",
      "format": "json",
      "url": "./aWQ6OTM4MCxsaW06MTAsZGI6ImhlcyIsMDk6Mzk.json",
      "transform": [
        {
          "type": "stratify",
          "key": "n",
          "parentKey": "p"
        },
				{
          "type": "formula",
          "as": "z",
          "expr": "(datum.A - datum.C)",
          "initonly": true
        },
				{
					"type": "formula",
					"as": "z2",
					"expr": "(datum.A >= cutoff && datum.A > datum.C) ? 1: (datum.C >= cutoff && datum.C > datum.A) ? -1: 0",
					"initonly": true
				},
        {
          "type": "formula",
          "as": "w2",
          "expr": "(datum.w) ? 1: null",
          "initonly": true
        },
        {
          "type": "partition",
          "field": {"signal": "(scaled == 'relative') ? 'w2': 'w'"},
          "size": [{"signal": "2 * PI"}, {"signal": "width / 2.05"}],
          "as": ["a0", "r0", "a1", "r1", "depth", "children"]
        }
      ]
    },
		{
			"name": "ntree",
			"source": "tree",
			"transform": [
				{
					"type": "aggregate"
				}
			]
		}
  ],

  "scales": [
		{
      "name": "ccolor",
      "type": "sequential",
      "domain": {"data": "tree", "field": "z"},
      "domainMax": 1,
      "domainMid": 0,
      "domainMin": -1,
			"range": ["#A20017", "#FF452E", "#FF8B5C", "#EEEEEE", "#A2E7FF", "#17A2FF", "#005CD0"]
    }
  ],

  "legends": [
    {
      "fill": "ccolor",
      "type": "gradient",
      "title": "Δ𝒑",
      "titleFontSize": 15,
      "titlePadding": 5,
			"padding": 5,
			"offset": 5,
      "gradientLength": {"signal": "height / 2"},
      "gradientStrokeColor": {"value": "black"},
      "gradientStrokeWidth": 0.5,
      "encode": {
        "labels": {
          "update": {
            "text": {"signal": "datum.value === 0 ? '0 (No effect)' : datum.value === 1 ? '1 (Protective)' : datum.value == -1 ? '-1 (Risk)' : datum.value"},
            "fontSize": 14
          }
        }
      }
    }
  ],

  "marks": [
    {
      "type": "arc",
      "from": {"data": "tree"},
      "encode": {
        "enter": {
          "x": {"signal": "width / 2"},
          "y": {"signal": "height / 2"},
          "tooltip": {"signal": "{title: datum.x, 'Protective': format(datum.A, ',.3f') + pad(' ', round(datum.A * 25), '█'), 'No effect' : format(datum.B, ',.3f') + pad(' ', round(datum.B * 25), '█'), 'Risk' : format(datum.C, ',.3f') + pad(' ', round(datum.C * 25), '█')}"}
        },
        "update": {
          "startAngle": {"field": "a0"},
          "endAngle": {"field": "a1"},
          "innerRadius": {"field": "r0"},
          "outerRadius": {"field": "r1"},
					"fill": {"scale": "ccolor", "signal": "(colored == 'discrete') ? datum.z2: datum.z"},
          "stroke": {"value": "black"},
          "strokeWidth": {"signal": "2 * exp(-1 * datum.depth)"},
          "strokeOpacity": {"value": 0.5},
          "zindex": {"value": 0}
        },
        "hover": {
          "stroke": {"value": "black"},
          "strokeWidth": {"signal": "2 * exp(-0.5 * datum.depth)"},
          "strokeOpacity": {"value": 1},
          "cursor": {"value": "pointer"},
          "zindex": {"value": 1}
        }
      }
    },
		{
      "type": "text",
      "encode": {
        "enter": {
          "fill": {"value": "#888"},
          "text": {"value": "Δ𝒑 = 𝒑(𝗉𝗋𝗈𝗍𝖾𝖼𝗍𝗂𝗏𝖾) – 𝒑(𝗋𝗂𝗌𝗄)"},
          "x": {"signal": "width - 4"},
          "y": {"signal": "6"},
          "fontSize": {"value": 12},
          "align": {"value": "right"},
          "baseline": {"value": "top"}
        }
      }
    },
		{
			"type": "text",
			"encode": {
				"enter": {
					"fill": {"value": "#A20017"},
					"text": {"signal": "'█ 𝒑(𝗉𝗋𝗈𝗍𝖾𝖼𝗍𝗂𝗏𝖾) ≥ ' + cutoff"},
					"x": {"value": 4},
					"y": {"signal": "height - 24"},
					"fontSize": {"value": 12}
				},
				"update": {
					"opacity": {"signal": "(colored == 'discrete') ? 1: 0"}
				}
			}
		},
		{
			"type": "text",
			"encode": {
				"enter": {
					"fill": {"value": "#005CD0"},
					"text": {"signal": "'█ 𝒑(𝗋𝗂𝗌𝗄) ≥ ' + cutoff"},
					"x": {"value": 4},
					"y": {"signal": "height - 8"},
					"fontSize": {"value": 12}
				},
				"update": {
					"opacity": {"signal": "(colored == 'discrete') ? 1: 0"}
				}
			}
		},
    {
      "type": "text",
			"from": {"data": "ntree"},
      "encode": {
        "enter": {
          "fill": {"value": "#888"},
          "text": {"signal": "'Number of nodes shown: ' + datum.count"},
          "x": {"signal": "width - 4"},
          "y": {"signal": "height - 4"},
          "fontSize": {"value": 11},
          "align": {"value": "right"},
          "baseline": {"value": "bottom"}
        }
      }
    }
  ]
}
